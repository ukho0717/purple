let BadBoard,mongoose,Joi,User;_15d‍.x([["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_15d‍.w("../../models/badBoard",[["default",["BadBoard"],function(v){BadBoard=v}]]);_15d‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_15d‍.w("@hapi/joi",[["default",["Joi"],function(v){Joi=v}]]);_15d‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);




const { ObjectId } = mongoose.Types;

       const write = async ctx => {
    console.log('/badBoard write 호출');

    const schema = Joi.object().keys({
        _id : Joi.string().required(),
        reason: Joi.string().required()
    });

    const result = schema.validate(ctx.request.body);
    if(result.error){
        ctx.status = 400;
        ctx.body = result.error;
        return;
    }

    const { _id, reason } = ctx.request.body;
    // const user_email = ctx.state.user_email;
    const user = await User.findById(_id);
    _15d‍.g.console.log('불러와지는가',user);
    const post = new BadBoard({
        reason,
        User: {
            user_nick: user.user_nick,
            profile_pic: user.profile_pic[0]
        }
    });
    try{
        await post.save();
        ctx.body = post;
    }catch(e){
        ctx.throw(500, e);
    }
};

       const list = async ctx => {
    try{
        const posts = await BadBoard.find().sort({ _id: -1 }).exec();
        ctx.body = posts.map(post => post.toJSON());
    }catch(e){
        ctx.throw(500, e);
    }
};

       const read = async (ctx) => {
    const { bad_id } = ctx.params;
    _15d‍.g.console.log(bad_id);
    try{
        const post = await BadBoard.findById(bad_id).exec();
        ctx.body = post.toJSON();
    }catch(e){
        ctx.throw(500, e);
    }
};

       const remove = async ctx => {
    const { bad_id } = ctx.params;
    _15d‍.g.console.log(bad_id);
    try{
        await BadBoard.findByIdAndRemove(bad_id).exec();
        ctx.status = 204;
    }catch(e){
        ctx.throw(500, e);
    }
};

       const update = async ctx => {
    const { bad_id } = ctx.params;

    const schema = Joi.object().keys({
        reason: Joi.string()
    });

    const result = schema.validate(ctx.request.body);
    if(result.error){
        ctx.status = 400;
        ctx.body = result.error;
        return;
    }

    try{
        const post = await BadBoard.findByIdAndUpdate(bad_id, ctx.request.body, {
            new: true
        }).exec();
        if(!post){
            ctx.status = 404;
            return;
        }
        ctx.body = post;
    }catch(e){
        ctx.throw(500, e);
    }
};